Texture2D inputTexture : register(t0); // typically depth
SamplerState samplerState : register(s0);

// Sobel kernels
row_major static const float3x3 sobelX = {
   { -1,  0, +1 },
   { -2,  0, +2 },
   { -1,  0, +1 }
};

row_major static const float3x3 sobelY = {
   { +1, +2, +1 },
   {  0,  0,  0 },
   { -1, -2, -1 }
};

// Scharr kernels
row_major static const float3x3 scharrX = {
   { -3,  0, +3 },
   { -10, 0, +10 },
   { -3,  0, +3 }
};

row_major static const float3x3 scharrY = {
   { +3, +10, +3 },
   {  0,   0,  0 },
   { -3, -10, -3 }
};

cbuffer SobelBuffer : register(b0)
{
	bool isScharr;
    float2 offset; // (1 / subdivisions)
    float threshold; // 0 = don't use
    float3 inkColor;

    float pad0;
};

struct PixelInputType
{
	float2 uv : TEXCOORD0;
	float4 position : SV_POSITION;
};

float Fetch(float2 uv)
{
    float4 depth = inputTexture.Sample(samplerState, uv);
    return depth.r;
}

float4 PostprocessShader(PixelInputType input) : SV_Target
{
    float3 row0 = float3(Fetch(input.uv+float2(-offset.x,-offset.y)),
                         Fetch(input.uv+float2(    0,-offset.y)),
                         Fetch(input.uv+float2(+offset.x,-offset.y)));
    float3 row1 = float3(Fetch(input.uv+float2(-offset.x,    0)),
                         Fetch(input.uv            ),
                         Fetch(input.uv+float2(+offset.x,    0)));
    float3 row2 = float3(Fetch(input.uv+float2(-offset.x,+offset.y)),
                         Fetch(input.uv+float2(    0,+offset.y)),
                         Fetch(input.uv+float2(+offset.x,+offset.y)));

    // Select kernels
    float3x3 kx = isScharr ? scharrX : sobelX;
    float3x3 ky = isScharr ? scharrY : sobelY;

    // Multiply rows by matrix columns
    float gx = dot(kx[0], row0) + dot(kx[1], row1) + dot(kx[2], row2);
    float gy = dot(ky[0], row0) + dot(ky[1], row1) + dot(ky[2], row2);

    float edge = sqrt(gx*gx + gy*gy);

    edge = (threshold > 0) ? step(threshold, edge) : edge;

    float3 color = edge * inkColor;

    return float4(color, edge);
}