Texture2D inputTexture : register(t0);
SamplerState samplerState : register(s0);

cbuffer HalftoneBuffer : register(b0)
{
	float2 subdivisions;
	bool isMonotone;
	float3 dotColor;
	float3 channelAngles;

	float3 pad;
};

struct PixelInputType
{
	float2 uv : TEXCOORD0;
	float4 position : SV_POSITION;
};

float2 GetCenterUV(float2 uv, float rotation)
{
	float2x2 rotMatrix = float2x2(cos(-rotation), -sin(-rotation),
		sin(-rotation), cos(-rotation));

	float2 rotUV = mul(uv, rotMatrix);

	rotUV = floor(rotUV/1) + 0.5f;

	float2x2 invRot = float2x2(cos(rotation), -sin(rotation),
		sin(rotation), cos(rotation));

	return mul(rotUV, invRot);
}

float4 GetBrightness(float2 pixelPos, float2 textureSize, float2 centerPos)
{
	float2 centerUV = centerPos/textureSize;

	float2 delta = centerPos - pixelPos;
	float pixelDist = length(delta);
	pixelDist = pixelDist/0.7071; // fix magic number

	// skips a sqrt
	/*float pixelDist = dot(delta, delta);
	pixelDist = pixelDist/0.5;*/

	float4 baseColor = inputTexture.Sample(samplerState, centerUV);
	float4 cmy = 1.0 - baseColor;

	return (pixelDist >= cmy) ? 1 : 0;
}

float4 PostprocessShader(PixelInputType input) : SV_Target
{
	float2 textureSize;
	inputTexture.GetDimensions(textureSize.x, textureSize.y);
	textureSize /= dotSize;

	float2 pixelPos = input.uv * textureSize;
	float2 centerPos = GetCenterUV(pixelPos, 1); // doubles as cyan UV
	float2 centerPosM = GetCenterUV(pixelPos, 1.1);
	float2 centerPosY = GetCenterUV(pixelPos, 1.05);

	float4 CMY = GetBrightness(pixelPos, textureSize, centerPos);
	float C = CMY.r;
	float M = GetBrightness(pixelPos, textureSize, centerPosM).g;
	float Y = GetBrightness(pixelPos, textureSize, centerPosY).b;
	


	float3 color = float3(C, M, Y);

	return float4(color, 1);
	//return CMY;
	//return float4(brightness.rgb,1);
}