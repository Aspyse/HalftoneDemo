Texture2D normalTexture : register(t0);
SamplerState samplerState : register(s0);

cbuffer CrosshatchBuffer : register(b0)
{
	float3 lightDirectionVS;
	float thresholdA;

	float3 inkColor;
	float thresholdB;

	float3 clearColor;
	float hatchAngle;

	float thicknessMul;
	float topoFreqMul;
	bool isFeather;
	float pad0;
};

struct PixelInputType
{
	float2 uv : TEXCOORD0;
	float4 position : SV_POSITION;
};

// Manually calibrated values
static const float wH = 0.75;
static const float baseFreqH = 12;

static float hw = wH * 0.5 * thicknessMul;
static float freq	= baseFreqH * topoFreqMul;

float GetMask(float3 Di, float3 N, float localHW)
{
	float hi = acos(dot(N, Di));
	//hi = hi * 0.5 + 0.5;

	float field = hi * freq;
	float dH = abs(frac(field) - 0.5);

	float grad = fwidth(field) + 1e-5;
	float pixelDistH = dH / grad;

	return 1 - smoothstep(localHW - 0.5, localHW + 0.5, pixelDistH);
}

float4 PostprocessShader(PixelInputType input) : SV_Target
{
	float3 normal = normalize(normalTexture.SampleLevel(samplerState, input.uv, 0).rgb * 2 - 1);
	float3 L = normalize(-lightDirectionVS);

	float NdotL = dot(normal, L);

	float2 Lxy = L.xy;

	float3 up = abs(L.y) < 0.99 ? float3(0,1,0) : float3(1,0,0);
	float3 U  = normalize(cross(L, up));
	float3 V  = cross(L, U);

	// rotate
	float cosA = cos(hatchAngle);
	float sinA = sin(hatchAngle);

	float3 D1 = normalize(U * cosA + V * sinA);
	float3 D2 = normalize(U * -sinA + V * cosA);

	
	float vis = smoothstep(thresholdA, thresholdA-0.1, NdotL);
	float vis2 = smoothstep(thresholdB, thresholdB-0.1, NdotL);
	vis = lerp(1, vis, isFeather);
	vis2 = lerp(1, vis2, isFeather);

	float hwA = hw * vis;
	float hwB = hw * vis2;
	

	float mask1 = GetMask(D1, normal, hwA);
	float mask2 = GetMask(D2, normal, hwB);

	/* FINAL COLOR */
	vis = (NdotL >= thresholdA) ? 0 : 1;
	vis2 = (NdotL >= thresholdB) ? 0 : 1;

	float edge = 1;
	edge -= mask1 * vis;
	edge -= mask2 * vis2;
	edge = saturate(edge);
	edge = 1 - edge;

	float3 color = lerp(clearColor, inkColor, edge);
	
    return float4(color, edge);
}